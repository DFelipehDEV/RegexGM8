<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var regex = regex_create("he(?&lt;Letter&gt;n|l)lo", RO_NONE, 3000);
assert("regex_create", regex == 0);

var matches_json = regex_matches_json(regex, "hleno hello hcknohenlo", JO_CAPTURES);
var matches = json_decode(matches_json);
assert("regex_matches_json", matches != -1);
ds_map_destroy(matches);

matches_json = regex_matches_from_json(regex, "hleno hello hcknohenlo", 16, JO_CAPTURES);
matches = json_decode(matches_json);
assert("regex_matches_from_json", matches != -1);
ds_map_destroy(matches);


var match1 = regex_is_match(regex, "hello");
var match2 = regex_is_match(regex, "henlo");
var match3 = regex_is_match(regex, "helno");
var match4 = regex_is_match_from(regex, "hleno hello hcknohenlo", 16);
var match5 = regex_is_match_from(regex, "hleno hello hcknohenlo", 19);

assert("regex_is_match", match1 &amp;&amp; match2 &amp;&amp; !match3);
assert("regex_is_match_from", match4 &amp;&amp; !match5);

match1 = regex_match(regex, "hleno hello hcknohenlo");
match2 = json_decode(regex_match_json(regex, "hleno hello hcknohenlo", JO_CAPTURES));
match3 = regex_match_from(regex, "hleno hello hcknohenlo", 16);
match4 = json_decode(
            regex_match_from_json(regex, "hleno hello hcknohenlo", 16, JO_CAPTURES)
         );
match5 = match_get_next_match(match1);
assert("regex_match", match1 != -1);
assert("regex_match_json", match2 != -1);
assert("regex_match_from", match3 != -1);
assert("regex_match_from_json", match4 != -1);
assert("match_get_next_match", match5 != -1);
assert("match_get_index", match_get_index(match1) != 0);
assert("match_get_length", match_get_length(match1) == 5);
assert("match_get_value", match_get_value(match1) == "hello");
assert("match_get_group_count", match_get_group_count(match1) &gt; 0);
ds_map_destroy(match2);
ds_map_destroy(match4);


var groups_json = match_get_groups_json(match1, JO_CAPTURES);
var groups = json_decode(groups_json);
assert("match_get_groups_json", groups != -1);
ds_map_destroy(groups);

var group1 = match_get_group_by_name(match3, "Letter");
var group_json = match_get_group_by_name_json(match1, "Letter", JO_CAPTURES);
var group2 = json_decode(group_json);
var group3 = match_get_group_by_index(match1, 0);
var group4 = json_decode(match_get_group_by_index_json(match3, 1, JO_CAPTURES));
assert("match_get_group_by_name", group1 != -1 &amp;&amp; group1 != 0);
assert("match_get_group_by_name_json", group2 != -1 &amp;&amp; group2 != 0);
assert("match_get_group_by_index", group3 != -1 &amp;&amp; group3 != 0);
assert("match_get_group_by_index_json", group4 != -1 &amp;&amp; group4 != 0);
ds_map_destroy(group2);
ds_map_destroy(group4);

assert("group_get_index", group_get_index(group1) &gt; 0);
assert("group_get_length", group_get_length(group1) == 1);
assert("group_get_name", group_get_name(group1) == "Letter");
assert("group_get_success", group_get_success(group1) &amp;&amp;
    !group_get_success(match_get_group_by_name(match1, "NotAGroup"))
);
assert("group_get_capture_count", group_get_capture_count(group3) == 1);

var captures_json = group_get_captures_json(group3);
var captures = json_decode(captures_json);
assert("group_get_captures_json", captures &gt; 0);
ds_map_destroy(captures);

var capture1 = group_get_capture(group3, 0);
var capture_json = group_get_capture_json(group1, 0);
var capture2 = json_decode(group_get_capture_json(group1, 0));
assert("group_get_capture", capture1 &gt; 0);
assert("group_get_capture_json", capture2 &gt;= 0);
ds_map_destroy(capture2);

assert("capture_get_index", capture_get_index(capture1) &gt; 0);
assert("capture_get_length", capture_get_length(capture1) &gt; 0);
assert("capture_get_value", capture_get_value(capture1) == "hello");

var replace1 = regex_replace(regex, "hello henlo", "Hello");
var replace2 = regex_replace_count(regex, "hello henlo", "Hello", 1);
var replace3 = regex_replace_from(regex, "hello henlo", "Hello", 5);

assert("regex_replace", replace1 == "Hello Hello");
assert("regex_replace_count", replace2 == "Hello henlo");
assert("regex_replace_from", replace3 == "hello Hello");

regex = regex_create(" ", RO_NONE, 3000);
var split1 = regex_split(regex, "My cat is silly");
assert("regex_split", split1 != noone);

var split_json = regex_split_json(regex, "The cat is fast");
show_debug_message(split_json);
split1 = json_decode(split_json);
assert("regex_split_json", true);
ds_map_destroy(split1);

assert("regex_get_cache_size", regex_get_cache_size() == 15);
regex_set_cache_size(16);
assert("regex_get_cache_size", regex_get_cache_size() == 16);

assert("regex_destroy_id", regex_destroy_id(regex));
assert("regex_destroy_all", regex_destroy_all());


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
